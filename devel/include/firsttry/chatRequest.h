// Generated by gencpp from file firsttry/chatRequest.msg
// DO NOT EDIT!


#ifndef FIRSTTRY_MESSAGE_CHATREQUEST_H
#define FIRSTTRY_MESSAGE_CHATREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace firsttry
{
template <class ContainerAllocator>
struct chatRequest_
{
  typedef chatRequest_<ContainerAllocator> Type;

  chatRequest_()
    : a()  {
    }
  chatRequest_(const ContainerAllocator& _alloc)
    : a(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _a_type;
  _a_type a;





  typedef boost::shared_ptr< ::firsttry::chatRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::firsttry::chatRequest_<ContainerAllocator> const> ConstPtr;

}; // struct chatRequest_

typedef ::firsttry::chatRequest_<std::allocator<void> > chatRequest;

typedef boost::shared_ptr< ::firsttry::chatRequest > chatRequestPtr;
typedef boost::shared_ptr< ::firsttry::chatRequest const> chatRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::firsttry::chatRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::firsttry::chatRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::firsttry::chatRequest_<ContainerAllocator1> & lhs, const ::firsttry::chatRequest_<ContainerAllocator2> & rhs)
{
  return lhs.a == rhs.a;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::firsttry::chatRequest_<ContainerAllocator1> & lhs, const ::firsttry::chatRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace firsttry

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::firsttry::chatRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::firsttry::chatRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::firsttry::chatRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::firsttry::chatRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::firsttry::chatRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::firsttry::chatRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::firsttry::chatRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cec2f53f86620c7bb01476cbe41b2fae";
  }

  static const char* value(const ::firsttry::chatRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcec2f53f86620c7bULL;
  static const uint64_t static_value2 = 0xb01476cbe41b2faeULL;
};

template<class ContainerAllocator>
struct DataType< ::firsttry::chatRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "firsttry/chatRequest";
  }

  static const char* value(const ::firsttry::chatRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::firsttry::chatRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string a\n"
;
  }

  static const char* value(const ::firsttry::chatRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::firsttry::chatRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct chatRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::firsttry::chatRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::firsttry::chatRequest_<ContainerAllocator>& v)
  {
    s << indent << "a: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.a);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIRSTTRY_MESSAGE_CHATREQUEST_H
