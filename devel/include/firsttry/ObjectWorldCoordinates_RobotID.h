// Generated by gencpp from file firsttry/ObjectWorldCoordinates_RobotID.msg
// DO NOT EDIT!


#ifndef FIRSTTRY_MESSAGE_OBJECTWORLDCOORDINATES_ROBOTID_H
#define FIRSTTRY_MESSAGE_OBJECTWORLDCOORDINATES_ROBOTID_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace firsttry
{
template <class ContainerAllocator>
struct ObjectWorldCoordinates_RobotID_
{
  typedef ObjectWorldCoordinates_RobotID_<ContainerAllocator> Type;

  ObjectWorldCoordinates_RobotID_()
    : robot_id()
    , coordinates()  {
    }
  ObjectWorldCoordinates_RobotID_(const ContainerAllocator& _alloc)
    : robot_id(_alloc)
    , coordinates(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_id_type;
  _robot_id_type robot_id;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _coordinates_type;
  _coordinates_type coordinates;





  typedef boost::shared_ptr< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectWorldCoordinates_RobotID_

typedef ::firsttry::ObjectWorldCoordinates_RobotID_<std::allocator<void> > ObjectWorldCoordinates_RobotID;

typedef boost::shared_ptr< ::firsttry::ObjectWorldCoordinates_RobotID > ObjectWorldCoordinates_RobotIDPtr;
typedef boost::shared_ptr< ::firsttry::ObjectWorldCoordinates_RobotID const> ObjectWorldCoordinates_RobotIDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator1> & lhs, const ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id &&
    lhs.coordinates == rhs.coordinates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator1> & lhs, const ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace firsttry

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3940801c7cc7e452ec2d947ccb47469";
  }

  static const char* value(const ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3940801c7cc7e45ULL;
  static const uint64_t static_value2 = 0x2ec2d947ccb47469ULL;
};

template<class ContainerAllocator>
struct DataType< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "firsttry/ObjectWorldCoordinates_RobotID";
  }

  static const char* value(const ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot_id\n"
"float32[] coordinates\n"
;
  }

  static const char* value(const ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.coordinates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectWorldCoordinates_RobotID_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::firsttry::ObjectWorldCoordinates_RobotID_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_id);
    s << indent << "coordinates[]" << std::endl;
    for (size_t i = 0; i < v.coordinates.size(); ++i)
    {
      s << indent << "  coordinates[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.coordinates[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIRSTTRY_MESSAGE_OBJECTWORLDCOORDINATES_ROBOTID_H
